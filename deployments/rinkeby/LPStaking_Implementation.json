{
  "address": "0xa82C2D352b90e14F42C972960fD7De43f5BA5E5f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        }
      ],
      "name": "setDAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_FACTORY",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "setRewardsToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ROUTER",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "setStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "stakeLPWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLPWithoutPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IUniswapV2ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddLiquidityAndReturnLP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddLiquidityAndStakeLP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeed51388341d1a1e3a81b8b82abb4e46e8338fbdc12bdbe057a7b1520c0ec85a",
  "receipt": {
    "to": null,
    "from": "0x1fa1b17D085224d89452cdc7324c7d8930EfC83E",
    "contractAddress": "0xa82C2D352b90e14F42C972960fD7De43f5BA5E5f",
    "transactionIndex": 15,
    "gasUsed": "1913825",
    "logsBloom": "0x
    "blockHash": "0xbd352d3e007a25b8b2bb42a7bae4b31037c22c6315f44beb015278f116e75d17",
    "transactionHash": "0xeed51388341d1a1e3a81b8b82abb4e46e8338fbdc12bdbe057a7b1520c0ec85a",
    "logs": [],
    "blockNumber": 10540882,
    "cumulativeGasUsed": "4098731",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "984f229352a817782683c22520edc851",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"}],\"name\":\"setDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FACTORY\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"setRewardsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ROUTER\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"stakeLPWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLPWithoutPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddLiquidityAndReturnLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddLiquidityAndStakeLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmount(uint256,uint256)\":{\"details\":\"according to the Uniswap\\u00b4s whitepaper and it\\u00b4s maths, regarding to the swaps and fees the formula to calculate the swap before adding liquidity is s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f)) where s = optimal swap amount r = amount of reserve of token a a = amount of token a the user has f = swap fee percent With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the  function.\",\"params\":{\"a\":\"amount of token a the user has\",\"r\":\"amount of reserve of token a\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address,address)\":{\"details\":\"This address is the required by UniSwap for swaps between tokens and ETH\",\"params\":{\"_DAI\":\"is the address of the DAI Token\",\"_factory\":\"is the address of the Uniswap Factory V2\",\"_router\":\"is the address of the Uniswap Router V2\"}},\"isAdmin(address)\":{\"params\":{\"_address\":\"is the address for check\"},\"returns\":{\"_0\":\"a boolean, true if the user has the ADMIN_ROLE role or false otherwise\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"stakeLPWithPermit(uint256,bytes)\":{\"details\":\"This function doesn't require the user to do an Approval transaction beforeThis function require a signature by the user in the off-chain\",\"params\":{\"_amount\":\"is a uint which is the amount of LP Tokens to be staked\"}},\"stakeLPWithoutPermit(uint256)\":{\"details\":\"This function require the user to do an Approval transaction before\",\"params\":{\"_amount\":\"is a uint which is the amount of LP Tokens to be staked\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swapAddLiquidityAndReturnLP()\":{\"details\":\"only adds liquidity to the ETH / DAI pool\"},\"swapAddLiquidityAndStakeLP()\":{\"details\":\"only adds liquidity to the ETH / DAI pool\"},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"is a uint with the amount of LP Tokens to be withdrawed\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Log(string,uint256)\":{\"notice\":\"EVENTS \"},\"RewardClaimed(address,uint256)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"CONSTANTS\"},\"getAmount(uint256,uint256)\":{\"notice\":\"an auxiliar function to get the optimal swap amount to add liquidity\"},\"getReward()\":{\"notice\":\"Function that allows a user to withdraw his Reward tokens\"},\"initialize(address,address,address,address,address)\":{\"notice\":\"Function initializer of this upgradeable contract\"},\"isAdmin(address)\":{\"notice\":\"Function that allow to know if an address has the ADMIN_ROLE role\"},\"rewardPerToken()\":{\"notice\":\"functions to calculate rewards and earnings\"},\"rewardsToken()\":{\"notice\":\"VARIABLES\"},\"stakeLPWithPermit(uint256,bytes)\":{\"notice\":\"Function used to stake LP tokens already owned by the user\"},\"stakeLPWithoutPermit(uint256)\":{\"notice\":\"Function used to stake LP tokens already owned by the user\"},\"swapAddLiquidityAndReturnLP()\":{\"notice\":\"the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender\"},\"swapAddLiquidityAndStakeLP()\":{\"notice\":\"the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"MAPPINGS\"},\"withdraw(uint256)\":{\"notice\":\"Function that allows a user to withdraw his LP Tokens staked in the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LPStacking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/LPStacking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// CONTRACTS INHERITHED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"./OptimalSwap.sol\\\";\\r\\nimport \\\"./StakingRewards.sol\\\";\\r\\n\\r\\ncontract LPStaking is AccessControlUpgradeable, OptimalSwap, StakingRewards  {\\r\\n    /// CONSTANTS\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\r\\n    /// Functions\\r\\n    /**\\r\\n     *  @notice Function initializer of this upgradeable contract\\r\\n     *  @param _router is the address of the Uniswap Router V2\\r\\n     *  @param _factory is the address of the Uniswap Factory V2\\r\\n     *  @param _DAI is the address of the DAI Token\\r\\n     *  @dev This address is the required by UniSwap for swaps between tokens and ETH\\r\\n     */\\r\\n    function initialize(\\r\\n        address _router,\\r\\n        address _factory,\\r\\n        address _DAI,\\r\\n        address _stakingToken,\\r\\n        address _rewardsToken\\r\\n    ) public initializer {\\r\\n        __OptimalSwap_init();\\r\\n        __Staking_init();\\r\\n        __AccessControl_init();\\r\\n\\r\\n        _setupRole(ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        setRouter(_router);\\r\\n        setFactory(_factory);\\r\\n        setDAI(_DAI);\\r\\n        setStakingToken(_stakingToken);\\r\\n        setRewardsToken(_rewardsToken);\\r\\n        setRewardRate(100);\\r\\n        lastUpdateTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Function used to stake LP tokens already owned by the user\\r\\n     *  @dev This function require the user to do an Approval transaction before\\r\\n     *  @param _amount is a uint which is the amount of LP Tokens to be staked\\r\\n     */\\r\\n    function stakeLPWithoutPermit(uint _amount) public {\\r\\n        require(stake(_amount));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     *  @notice Function used to stake LP tokens already owned by the user\\r\\n     *  @dev This function doesn't require the user to do an Approval transaction before\\r\\n     *  @dev This function require a signature by the user in the off-chain\\r\\n     *  @param _amount is a uint which is the amount of LP Tokens to be staked\\r\\n     */\\r\\n    function stakeLPWithPermit(uint _amount, bytes memory sig) public {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = _split(sig);\\r\\n\\r\\n        require(stakeWithPermit(_amount, r, s, v));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Function used to connect two contracts imported\\r\\n     *  @dev This function allows the OptimalSwap to connect with StakingRewards\\r\\n     */\\r\\n    function stakeLiquidity(uint _amount) internal override virtual{\\r\\n        stakeFromContract(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Function that allow to know if an address has the ADMIN_ROLE role\\r\\n     *  @param _address is the address for check\\r\\n     *  @return a boolean, true if the user has the ADMIN_ROLE role or false otherwise\\r\\n     */\\r\\n    function isAdmin(address _address) public view returns (bool) {\\r\\n        return(hasRole(ADMIN_ROLE, _address));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice to split the signature in the necesary parameters\\r\\n    * @dev \\\"r\\\", \\\"s\\\" and \\\"v\\\", together with the corresponding hash it recover the signer with the\\r\\n    * solidity function ecrecover, which return the address of the signer\\r\\n    * @param _sig the signature\\r\\n    * @return r cryptograph parameter used to digital signatures\\r\\n    * @return s cryptograph parameter used to digital signatures\\r\\n    * @return v required by ethereum\\r\\n    */\\r\\n    function _split(bytes memory _sig) \\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        // the length 65 corresponds to 32 bytes from \\\"r\\\" plus 32 bytes from \\\"s\\\" and 01 byte from\\r\\n        // v (uint8 equals 01 byte) \\r\\n        require(_sig.length == 65, \\\"invalid signature\\\");\\r\\n        // as dynamic data type, sig, stores it\\u00b4s length on the first 32 bytes of the data. _sig is \\r\\n        // not the actual signature, instead it is a pointer to where the signature is stored in memory\\r\\n        assembly {\\r\\n        //skip the first 32 bytes because it holds the length of the sig, and asign the next 32 to r\\r\\n            r := mload(add(_sig, 32))\\r\\n        //skip the first 64 bytes (first 32 is the length, next 32 is r) and asign the next 32 bytes to s \\r\\n            s := mload(add(_sig, 64))\\r\\n        //skip the first 96 ( first 32 is the length, next 32 is r, next 32 is s), and take the next byte\\r\\n            v := byte(0, mload(add(_sig, 96)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setStakingToken(address _stakingToken) public onlyRole(ADMIN_ROLE) {\\r\\n        stakingToken = IUniswapV2ERC20(_stakingToken);\\r\\n    }\\r\\n    \\r\\n    function setRewardsToken(address _rewardsToken) public onlyRole(ADMIN_ROLE) {\\r\\n        rewardsToken = IERC20Upgradeable(_rewardsToken);\\r\\n    }\\r\\n\\r\\n    function setRewardRate(uint _rewardRate) public onlyRole(ADMIN_ROLE) {\\r\\n        rewardRate = _rewardRate;\\r\\n    }\\r\\n\\r\\n    function setRouter(address _ROUTER) public onlyRole(ADMIN_ROLE) {\\r\\n        ROUTER = _ROUTER;\\r\\n        router = IUniswapV2Router02(ROUTER);\\r\\n    }\\r\\n    \\r\\n    function setFactory(address _FACTORY) public onlyRole(ADMIN_ROLE) {\\r\\n        FACTORY = _FACTORY;\\r\\n        factory = IUniswapV2Factory(FACTORY);\\r\\n    }\\r\\n    \\r\\n    function setDAI(address _DAI) public onlyRole(ADMIN_ROLE) {\\r\\n        DAI = _DAI;\\r\\n        dai = IERC20(DAI); \\r\\n    }\\r\\n}\",\"keccak256\":\"0xe07acf5eb57a8e4d6bd2d862e57eb802c639b69135adf0de625f51802ffdb6c4\",\"license\":\"MIT\"},\"contracts/OptimalSwap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n/**\\r\\n* @title Swap\\r\\n* @notice a contract to calculate the optimal amount of tokens to swap, so when the user wants to add\\r\\n* liquidity, contributing with only one token, it can be swapped by the optimal amount.\\r\\n*/\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// CONTRACTS INHERITHED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n/// INTERFACES USED\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\r\\n/// LIBRARIES USED\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract OptimalSwap is Initializable {\\r\\n\\r\\n/// VARIABLES\\r\\n\\r\\n    using SafeMath for uint;\\r\\n    address public ROUTER;\\r\\n    address public FACTORY;\\r\\n    address public DAI;\\r\\n    IUniswapV2Router02 public router;\\r\\n    IUniswapV2Factory public factory;\\r\\n    IERC20 public dai;\\r\\n\\r\\n/// EVENTS \\r\\n\\r\\n    event Log(string message, uint value);\\r\\n\\r\\n/// FUNCTIONS\\r\\n    function __OptimalSwap_init() internal onlyInitializing {}\\r\\n    \\r\\n    /**\\r\\n    * @notice an auxiliar function to get the square root\\r\\n    * @dev taked from Uniswap\\r\\n    */\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n        // else z = 0\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice an auxiliar function to get the optimal swap amount to add liquidity\\r\\n    * @dev according to the Uniswap\\u00b4s whitepaper and it\\u00b4s maths, regarding to the swaps and fees\\r\\n    * the formula to calculate the swap before adding liquidity is\\r\\n    * s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f))\\r\\n    * where\\r\\n    * s = optimal swap amount\\r\\n    * r = amount of reserve of token a\\r\\n    * a = amount of token a the user has\\r\\n    * f = swap fee percent\\r\\n    * With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the \\r\\n    * function.\\r\\n    * @param r amount of reserve of token a\\r\\n    * @param a amount of token a the user has\\r\\n    */\\r\\n    function getAmount(uint r, uint a) public pure returns (uint) {\\r\\n        return (sqrt(r.mul(r.mul(3988009)+a.mul(3988000))).sub(r.mul(1997)))/1994;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice the main function to swap and add liquidity\\r\\n    * @notice this function returns the LP Tokens to the msg sender\\r\\n    * @dev only adds liquidity to the ETH / DAI pool\\r\\n    */\\r\\n    function swapAddLiquidityAndReturnLP() external payable {\\r\\n        swapAndAddLiquidity(msg.value, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice the main function to swap and add liquidity\\r\\n    * @notice this function returns the LP Tokens to the msg sender\\r\\n    * @dev only adds liquidity to the ETH / DAI pool\\r\\n    */\\r\\n    function swapAddLiquidityAndStakeLP() external payable {\\r\\n        uint liquidity = swapAndAddLiquidity(msg.value, false);\\r\\n\\r\\n        stakeLiquidity(liquidity);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     *  @notice Function used to make the Swap and add the liquidity\\r\\n     *  @param _amountETH is a uint with the amount of ETH sended to the main functions\\r\\n     *  @param returnLP is a boolean used to know if the LP goes to the user or stake in the contract\\r\\n     */\\r\\n    function swapAndAddLiquidity(uint _amountETH, bool returnLP) internal returns (uint) {\\r\\n        // Get the ETH / DAI pair price\\r\\n        address pair = factory.getPair(router.WETH(), DAI);\\r\\n\\r\\n        // Get the reserves of ETH\\r\\n        (uint reserve0, , ) = IUniswapV2Pair(pair).getReserves();\\r\\n\\r\\n        // Calculate the optimal amount to swap and the amount left.\\r\\n        uint ethToSwap = getAmount(reserve0, _amountETH);\\r\\n        uint ethLeft = _amountETH - ethToSwap;\\r\\n\\r\\n        // Get the actual contract\\u00b4s DAI\\u00b4s balance\\r\\n        uint afterDAIbalance = dai.balanceOf(address(this));\\r\\n\\r\\n        // Perform the swap\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = DAI;\\r\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:ethToSwap}\\r\\n        (\\r\\n            1,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // Get the new contract\\u00b4s DAI\\u00b4s balance and calculate the DAIs get from the swap\\r\\n        uint beforeDAIbalance = dai.balanceOf(address(this));\\r\\n        uint actualDAI = beforeDAIbalance - afterDAIbalance;\\r\\n\\r\\n        // Approve the Uniswap Router to spend the corresponding balance\\r\\n        dai.approve(ROUTER, actualDAI);\\r\\n\\r\\n        address receiver = (returnLP) ? msg.sender : address(this);\\r\\n\\r\\n        // Add the liquidity with the ETH left and the corresponding DAI\\r\\n        (\\r\\n            uint amountDAI,\\r\\n            uint amountETH,\\r\\n            uint liquidity\\r\\n        ) = router.addLiquidityETH{value:ethLeft}(\\r\\n            DAI,\\r\\n            actualDAI,\\r\\n            1,\\r\\n            1,\\r\\n            receiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // Emit the corresponding events\\r\\n        emit Log(\\\"DAI amount\\\", amountDAI);\\r\\n        emit Log(\\\"ETH amount\\\", amountETH);\\r\\n        emit Log(\\\"liquidity\\\", liquidity);\\r\\n\\r\\n        return (liquidity);\\r\\n    }\\r\\n\\r\\n    function stakeLiquidity(uint _amount) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x0da62afb21f8b39b4c7431c4590d13fae4b843cf1390f9dbca8cf35254845bcc\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n/**\\r\\n* @title Staking\\r\\n* @notice a contract to stake and calculate the staking rewards.\\r\\n*/\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// INTERFACES USED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\\\";\\r\\n\\r\\ncontract StakingRewards is Initializable {\\r\\n\\r\\n/// VARIABLES\\r\\n\\r\\n    IERC20Upgradeable public rewardsToken; //reward given to the user\\r\\n    IUniswapV2ERC20 public stakingToken; //token that the user stakes, both ERC20\\r\\n    uint public rewardRate; // tokens minted per second\\r\\n    uint public lastUpdateTime; // last time this contract was called\\r\\n    uint public rewardPerTokenStored; // rewardRate / _totalSupply\\r\\n    uint public totalSupply; // Asociated to the _balances mapping\\r\\n\\r\\n/// MAPPINGS\\r\\n\\r\\n    mapping(address => uint) public userRewardPerTokenPaid;\\r\\n    mapping(address => uint) public rewards;\\r\\n    mapping(address => uint) public balances; //tokens staked per user\\r\\n\\r\\n/// EVENTS\\r\\n\\r\\n    event RewardClaimed(address account, uint amount);\\r\\n\\r\\n/// MODIFIERS\\r\\n    /**\\r\\n    * @notice we update the reward every time the user interact with the contract\\r\\n    */\\r\\n    modifier updateReward(address account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        lastUpdateTime = block.timestamp;\\r\\n        rewards[account] = earned(account);\\r\\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n/// FUNCTIONS\\r\\n\\r\\n    /**\\r\\n    * @notice the next to functions are inmutables, and they can only be called by a function\\r\\n    * with the {Initializer} modifier\\r\\n    * @dev to initialize this contract call the __Staking_init on yor initialize function from\\r\\n    * your upgradeable contract\\r\\n    */\\r\\n    function __Staking_init() internal onlyInitializing {}\\r\\n\\r\\n    /**\\r\\n    * @notice functions to calculate rewards and earnings\\r\\n    */\\r\\n    function rewardPerToken() public view returns (uint) {\\r\\n        if (totalSupply == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            rewardPerTokenStored +\\r\\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / totalSupply);\\r\\n    }\\r\\n\\r\\n    function earned(address account) public view returns (uint) {\\r\\n        return \\r\\n            rewards[account] +\\r\\n            ((balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to stake his LP tokens obtained outside the contract\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be staked\\r\\n    */\\r\\n    function stake(uint _amount) internal updateReward(msg.sender) returns (bool) {\\r\\n        totalSupply += _amount;\\r\\n        balances[msg.sender] += _amount;\\r\\n        return stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to stake his LP tokens obtained inside the contract\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be staked\\r\\n    */\\r\\n    function stakeFromContract(uint _amount) internal updateReward(msg.sender) {\\r\\n        totalSupply += _amount;\\r\\n        balances[msg.sender] += _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to stake his LP tokens obtained outside the contract\\r\\n    *   @notice this function uses a signature in the Uniswap's permit function\\r\\n    *   @dev This use of the signature allows the user transfer without approve before\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be staked\\r\\n    *   @param r is a bytes32 part of the signature required by the permit function\\r\\n    *   @param s is a bytes32 part of the signature required by the permit function\\r\\n    *   @param v is a uint8 part of the signature required by the permit function\\r\\n    */\\r\\n    function stakeWithPermit(\\r\\n        uint _amount,\\r\\n        bytes32 r,\\r\\n        bytes32 s,\\r\\n        uint8 v\\r\\n    ) \\r\\n        internal\\r\\n        updateReward(msg.sender)\\r\\n        returns (bool)\\r\\n    {\\r\\n        totalSupply += _amount;\\r\\n        balances[msg.sender] += _amount;\\r\\n        stakingToken.permit(msg.sender, address(this), _amount, block.timestamp + 1 days, v, r, s);\\r\\n        return stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to withdraw his LP Tokens staked in the contract\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be withdrawed\\r\\n    */\\r\\n    function withdraw(uint _amount) external updateReward(msg.sender) {\\r\\n        require(balances[msg.sender] >= _amount);\\r\\n\\r\\n        totalSupply -= _amount;\\r\\n        balances[msg.sender] -= _amount;\\r\\n        stakingToken.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to withdraw his Reward tokens\\r\\n    */\\r\\n    function getReward() external updateReward(msg.sender) {\\r\\n        uint reward = rewards[msg.sender];\\r\\n        rewards[msg.sender] = 0;\\r\\n        rewardsToken.transfer(msg.sender, reward);\\r\\n\\r\\n        emit RewardClaimed(msg.sender, reward);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55c60f2bbbaa720c5f6dcd885c510f67b0878203dc95dc420d9812e35ec96214\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121aa806100206000396000f3fe60806040526004361061023a5760003560e01c8063809b0c2d1161012e578063c8f33c91116100ab578063df136d651161006f578063df136d65146106be578063e0bab4c4146106d4578063ea246827146106f4578063f4b9fa75146106fc578063f887ea401461071c57600080fd5b8063c8f33c9114610633578063cd3daf9d14610649578063d1af0c7d1461065e578063d547741f1461067e578063de320cc11461069e57600080fd5b8063a217fddf116100f2578063a217fddf1461059e578063aae693e0146105b3578063b97dbf59146105d3578063c0d78655146105f3578063c45a01551461061357600080fd5b8063809b0c2d146105095780638408b5ac146105115780638b8763471461053157806391d148541461055e5780639e447fc61461057e57600080fd5b80632e1a7d4d116101bc5780634ca98997116101805780634ca98997146104715780635bb478081461049157806372f702f3146104b157806375b238fc146104d15780637b0a47ee146104f357600080fd5b80632e1a7d4d146103dc5780632f2ff15d146103fc57806332fe7b261461041c57806336568abe1461043c5780633d18b9121461045c57600080fd5b80631e9b12ef116102035780631e9b12ef14610307578063248a9ca31461032757806324d7806c1461035757806327e235e3146103775780632dd31000146103a457600080fd5b80628cc2621461023f57806301ffc9a7146102725780630700037d146102a25780631459457a146102cf57806318160ddd146102f1575b600080fd5b34801561024b57600080fd5b5061025f61025a366004611c7e565b61073c565b6040519081526020015b60405180910390f35b34801561027e57600080fd5b5061029261028d366004611c9b565b6107c7565b6040519015158152602001610269565b3480156102ae57600080fd5b5061025f6102bd366004611c7e565b60a46020526000908152604090205481565b3480156102db57600080fd5b506102ef6102ea366004611cc5565b6107fc565b005b3480156102fd57600080fd5b5061025f60a25481565b34801561031357600080fd5b506102ef610322366004611c7e565b61092a565b34801561033357600080fd5b5061025f610342366004611d36565b60009081526065602052604090206001015490565b34801561036357600080fd5b50610292610372366004611c7e565b610966565b34801561038357600080fd5b5061025f610392366004611c7e565b60a56020526000908152604090205481565b3480156103b057600080fd5b506098546103c4906001600160a01b031681565b6040516001600160a01b039091168152602001610269565b3480156103e857600080fd5b506102ef6103f7366004611d36565b610980565b34801561040857600080fd5b506102ef610417366004611d4f565b610a8d565b34801561042857600080fd5b506097546103c4906001600160a01b031681565b34801561044857600080fd5b506102ef610457366004611d4f565b610ab3565b34801561046857600080fd5b506102ef610b31565b34801561047d57600080fd5b5061025f61048c366004611d7f565b610c32565b34801561049d57600080fd5b506102ef6104ac366004611c7e565b610c93565b3480156104bd57600080fd5b50609e546103c4906001600160a01b031681565b3480156104dd57600080fd5b5061025f60008051602061215583398151915281565b3480156104ff57600080fd5b5061025f609f5481565b6102ef610cd9565b34801561051d57600080fd5b506102ef61052c366004611d36565b610ce7565b34801561053d57600080fd5b5061025f61054c366004611c7e565b60a36020526000908152604090205481565b34801561056a57600080fd5b50610292610579366004611d4f565b610cf9565b34801561058a57600080fd5b506102ef610599366004611d36565b610d24565b3480156105aa57600080fd5b5061025f600081565b3480156105bf57600080fd5b506102ef6105ce366004611db7565b610d43565b3480156105df57600080fd5b506102ef6105ee366004611c7e565b610d73565b3480156105ff57600080fd5b506102ef61060e366004611c7e565b610db9565b34801561061f57600080fd5b50609b546103c4906001600160a01b031681565b34801561063f57600080fd5b5061025f60a05481565b34801561065557600080fd5b5061025f610dff565b34801561066a57600080fd5b50609d546103c4906001600160a01b031681565b34801561068a57600080fd5b506102ef610699366004611d4f565b610e5d565b3480156106aa57600080fd5b506102ef6106b9366004611c7e565b610e83565b3480156106ca57600080fd5b5061025f60a15481565b3480156106e057600080fd5b506099546103c4906001600160a01b031681565b6102ef610ebf565b34801561070857600080fd5b50609c546103c4906001600160a01b031681565b34801561072857600080fd5b50609a546103c4906001600160a01b031681565b6001600160a01b038116600090815260a36020526040812054670de0b6b3a764000090610767610dff565b6107719190611e88565b6001600160a01b038416600090815260a560205260409020546107949190611e9f565b61079e9190611ebe565b6001600160a01b038316600090815260a460205260409020546107c19190611ee0565b92915050565b60006001600160e01b03198216637965db0b60e01b14806107c157506301ffc9a760e01b6001600160e01b03198316146107c1565b600054610100900460ff166108175760005460ff161561081b565b303b155b6108835760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156108a5576000805461ffff19166101011790555b6108ad610ed7565b6108b5610ed7565b6108bd610ed7565b6108d560008051602061215583398151915233610f44565b6108de86610db9565b6108e785610c93565b6108f084610d73565b6108f98361092a565b61090282610e83565b61090c6064610d24565b4260a0558015610922576000805461ff00191690555b505050505050565b6000805160206121558339815191526109438133610f4e565b50609e80546001600160a01b0319166001600160a01b0392909216919091179055565b60006107c160008051602061215583398151915283610cf9565b33610989610dff565b60a1554260a0556109998161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a382528383205533825260a5905220548211156109d857600080fd5b8160a260008282546109ea9190611e88565b909155505033600090815260a5602052604081208054849290610a0e908490611e88565b9091555050609e5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190611ef8565b505050565b600082815260656020526040902060010154610aa98133610f4e565b610a888383610fb2565b6001600160a01b0381163314610b235760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161087a565b610b2d8282611038565b5050565b33610b3a610dff565b60a1554260a055610b4a8161073c565b6001600160a01b03828116600090815260a4602081815260408084209590955560a15460a3825285842055338084529190528382208054929055609d54935163a9059cbb60e01b815260048101919091526024810182905290929091169063a9059cbb906044016020604051808303816000875af1158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190611ef8565b5060408051338152602081018390527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241910160405180910390a15050565b60006107ca610c82610c46856107cd61109f565b610c7c610c77610c5987623cda2061109f565b610c6689623cda2961109f565b610c709190611ee0565b889061109f565b6110ab565b9061111b565b610c8c9190611ebe565b9392505050565b600080516020612155833981519152610cac8133610f4e565b50609880546001600160a01b039092166001600160a01b03199283168117909155609b8054909216179055565b610ce4346001611127565b50565b610cf08161172a565b610ce457600080fd5b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612155833981519152610d3d8133610f4e565b50609f55565b6000806000610d5184611829565b925092509250610d6385848484611891565b610d6c57600080fd5b5050505050565b600080516020612155833981519152610d8c8133610f4e565b50609980546001600160a01b039092166001600160a01b03199283168117909155609c8054909216179055565b600080516020612155833981519152610dd28133610f4e565b50609780546001600160a01b039092166001600160a01b03199283168117909155609a8054909216179055565b600060a254600003610e12575060a15490565b60a254609f5460a054610e259042611e88565b610e2f9190611e9f565b610e4190670de0b6b3a7640000611e9f565b610e4b9190611ebe565b60a154610e589190611ee0565b905090565b600082815260656020526040902060010154610e798133610f4e565b610a888383611038565b600080516020612155833981519152610e9c8133610f4e565b50609d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ecc346000611127565b9050610ce481611a3e565b600054610100900460ff16610f425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161087a565b565b610b2d8282610fb2565b610f588282610cf9565b610b2d57610f70816001600160a01b03166014611a47565b610f7b836020611a47565b604051602001610f8c929190611f4a565b60408051601f198184030181529082905262461bcd60e51b825261087a91600401611fbf565b610fbc8282610cf9565b610b2d5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610ff43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110428282610cf9565b15610b2d5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c8c8284611e9f565b6000600382111561110c57508060006110c5600283611ebe565b6110d0906001611ee0565b90505b81811015611106579050806002816110eb8186611ebe565b6110f59190611ee0565b6110ff9190611ebe565b90506110d3565b50919050565b8115611116575060015b919050565b6000610c8c8284611e88565b609b54609a54604080516315ab88c960e31b8152905160009384936001600160a01b039182169363e6a4390593919092169163ad5c46489160048083019260209291908290030181865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190611ff2565b60995460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112199190611ff2565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f9190612026565b50506001600160701b0316905060006112988287610c32565b905060006112a68288611e88565b609c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113189190612076565b60408051600280825260608201835292935060009290916020830190803683375050609a54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611ff2565b816000815181106113be576113be61208f565b6001600160a01b0392831660209182029290920101526099548251911690829060019081106113ef576113ef61208f565b6001600160a01b039283166020918202929092010152609a5460405163b6f9de9560e01b815291169063b6f9de95908690611435906001908690309042906004016120a5565b6000604051808303818588803b15801561144e57600080fd5b505af1158015611462573d6000803e3d6000fd5b5050609c546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190612076565b905060006114e48483611e88565b609c5460975460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af115801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190611ef8565b5060008a61156d573061156f565b335b609a5460995460405163f305d71960e01b81526001600160a01b03918216600482015260248101869052600160448201819052606482015281841660848201524260a482015292935060009283928392169063f305d719908b9060c40160606040518083038185885af11580156115ea573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061160f919061210f565b9250925092507fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b58360405161166b91906040808252600a908201526911105248185b5bdd5b9d60b21b6060820152602081019190915260800190565b60405180910390a160408051818152600a818301526911551208185b5bdd5b9d60b21b60608201526020810184905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a160408051818152600981830152686c697175696469747960b81b60608201526020810183905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a19e9d5050505050505050505050505050565b600033611735610dff565b60a1554260a0556117458161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a39091529181209190915560a28054859290611785908490611ee0565b909155505033600090815260a56020526040812080548592906117a9908490611ee0565b9091555050609e546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190611ef8565b600080600083516041146118735760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015260640161087a565b50505060208101516040820151606090920151909260009190911a90565b60003361189c610dff565b60a1554260a0556118ac8161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a39091529181209190915560a280548892906118ec908490611ee0565b909155505033600090815260a5602052604081208054889290611910908490611ee0565b9091555050609e546001600160a01b031663d505accf3330896119364262015180611ee0565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260ff8616608482015260a4810188905260c4810187905260e401600060405180830381600087803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b5050609e546040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b0390911692506323b872dd91506064016020604051808303816000875af1158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190611ef8565b9695505050505050565b610ce481611be3565b60606000611a56836002611e9f565b611a61906002611ee0565b67ffffffffffffffff811115611a7957611a79611da1565b6040519080825280601f01601f191660200182016040528015611aa3576020820181803683370190505b509050600360fc1b81600081518110611abe57611abe61208f565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611aed57611aed61208f565b60200101906001600160f81b031916908160001a9053506000611b11846002611e9f565b611b1c906001611ee0565b90505b6001811115611b94576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b5057611b5061208f565b1a60f81b828281518110611b6657611b6661208f565b60200101906001600160f81b031916908160001a90535060049490941c93611b8d8161213d565b9050611b1f565b508315610c8c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087a565b33611bec610dff565b60a1554260a055611bfc8161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a39091529181209190915560a28054849290611c3c908490611ee0565b909155505033600090815260a5602052604081208054849290611c60908490611ee0565b90915550505050565b6001600160a01b0381168114610ce457600080fd5b600060208284031215611c9057600080fd5b8135610c8c81611c69565b600060208284031215611cad57600080fd5b81356001600160e01b031981168114610c8c57600080fd5b600080600080600060a08688031215611cdd57600080fd5b8535611ce881611c69565b94506020860135611cf881611c69565b93506040860135611d0881611c69565b92506060860135611d1881611c69565b91506080860135611d2881611c69565b809150509295509295909350565b600060208284031215611d4857600080fd5b5035919050565b60008060408385031215611d6257600080fd5b823591506020830135611d7481611c69565b809150509250929050565b60008060408385031215611d9257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611dca57600080fd5b82359150602083013567ffffffffffffffff80821115611de957600080fd5b818501915085601f830112611dfd57600080fd5b813581811115611e0f57611e0f611da1565b604051601f8201601f19908116603f01168101908382118183101715611e3757611e37611da1565b81604052828152886020848701011115611e5057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015611e9a57611e9a611e72565b500390565b6000816000190483118215151615611eb957611eb9611e72565b500290565b600082611edb57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611ef357611ef3611e72565b500190565b600060208284031215611f0a57600080fd5b81518015158114610c8c57600080fd5b60005b83811015611f35578181015183820152602001611f1d565b83811115611f44576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f82816017850160208801611f1a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611fb3816028840160208801611f1a565b01602801949350505050565b6020815260008251806020840152611fde816040850160208701611f1a565b601f01601f19169190910160400192915050565b60006020828403121561200457600080fd5b8151610c8c81611c69565b80516001600160701b038116811461111657600080fd5b60008060006060848603121561203b57600080fd5b6120448461200f565b92506120526020850161200f565b9150604084015163ffffffff8116811461206b57600080fd5b809150509250925092565b60006020828403121561208857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156120ef5784516001600160a01b0316835293830193918301916001016120ca565b50506001600160a01b039690961660408501525050506060015292915050565b60008060006060848603121561212457600080fd5b8351925060208401519150604084015190509250925092565b60008161214c5761214c611e72565b50600019019056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122044901c52080c4109a3b6d436636f104a489e2928c40e824f2a487106c5d1758c64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061023a5760003560e01c8063809b0c2d1161012e578063c8f33c91116100ab578063df136d651161006f578063df136d65146106be578063e0bab4c4146106d4578063ea246827146106f4578063f4b9fa75146106fc578063f887ea401461071c57600080fd5b8063c8f33c9114610633578063cd3daf9d14610649578063d1af0c7d1461065e578063d547741f1461067e578063de320cc11461069e57600080fd5b8063a217fddf116100f2578063a217fddf1461059e578063aae693e0146105b3578063b97dbf59146105d3578063c0d78655146105f3578063c45a01551461061357600080fd5b8063809b0c2d146105095780638408b5ac146105115780638b8763471461053157806391d148541461055e5780639e447fc61461057e57600080fd5b80632e1a7d4d116101bc5780634ca98997116101805780634ca98997146104715780635bb478081461049157806372f702f3146104b157806375b238fc146104d15780637b0a47ee146104f357600080fd5b80632e1a7d4d146103dc5780632f2ff15d146103fc57806332fe7b261461041c57806336568abe1461043c5780633d18b9121461045c57600080fd5b80631e9b12ef116102035780631e9b12ef14610307578063248a9ca31461032757806324d7806c1461035757806327e235e3146103775780632dd31000146103a457600080fd5b80628cc2621461023f57806301ffc9a7146102725780630700037d146102a25780631459457a146102cf57806318160ddd146102f1575b600080fd5b34801561024b57600080fd5b5061025f61025a366004611c7e565b61073c565b6040519081526020015b60405180910390f35b34801561027e57600080fd5b5061029261028d366004611c9b565b6107c7565b6040519015158152602001610269565b3480156102ae57600080fd5b5061025f6102bd366004611c7e565b60a46020526000908152604090205481565b3480156102db57600080fd5b506102ef6102ea366004611cc5565b6107fc565b005b3480156102fd57600080fd5b5061025f60a25481565b34801561031357600080fd5b506102ef610322366004611c7e565b61092a565b34801561033357600080fd5b5061025f610342366004611d36565b60009081526065602052604090206001015490565b34801561036357600080fd5b50610292610372366004611c7e565b610966565b34801561038357600080fd5b5061025f610392366004611c7e565b60a56020526000908152604090205481565b3480156103b057600080fd5b506098546103c4906001600160a01b031681565b6040516001600160a01b039091168152602001610269565b3480156103e857600080fd5b506102ef6103f7366004611d36565b610980565b34801561040857600080fd5b506102ef610417366004611d4f565b610a8d565b34801561042857600080fd5b506097546103c4906001600160a01b031681565b34801561044857600080fd5b506102ef610457366004611d4f565b610ab3565b34801561046857600080fd5b506102ef610b31565b34801561047d57600080fd5b5061025f61048c366004611d7f565b610c32565b34801561049d57600080fd5b506102ef6104ac366004611c7e565b610c93565b3480156104bd57600080fd5b50609e546103c4906001600160a01b031681565b3480156104dd57600080fd5b5061025f60008051602061215583398151915281565b3480156104ff57600080fd5b5061025f609f5481565b6102ef610cd9565b34801561051d57600080fd5b506102ef61052c366004611d36565b610ce7565b34801561053d57600080fd5b5061025f61054c366004611c7e565b60a36020526000908152604090205481565b34801561056a57600080fd5b50610292610579366004611d4f565b610cf9565b34801561058a57600080fd5b506102ef610599366004611d36565b610d24565b3480156105aa57600080fd5b5061025f600081565b3480156105bf57600080fd5b506102ef6105ce366004611db7565b610d43565b3480156105df57600080fd5b506102ef6105ee366004611c7e565b610d73565b3480156105ff57600080fd5b506102ef61060e366004611c7e565b610db9565b34801561061f57600080fd5b50609b546103c4906001600160a01b031681565b34801561063f57600080fd5b5061025f60a05481565b34801561065557600080fd5b5061025f610dff565b34801561066a57600080fd5b50609d546103c4906001600160a01b031681565b34801561068a57600080fd5b506102ef610699366004611d4f565b610e5d565b3480156106aa57600080fd5b506102ef6106b9366004611c7e565b610e83565b3480156106ca57600080fd5b5061025f60a15481565b3480156106e057600080fd5b506099546103c4906001600160a01b031681565b6102ef610ebf565b34801561070857600080fd5b50609c546103c4906001600160a01b031681565b34801561072857600080fd5b50609a546103c4906001600160a01b031681565b6001600160a01b038116600090815260a36020526040812054670de0b6b3a764000090610767610dff565b6107719190611e88565b6001600160a01b038416600090815260a560205260409020546107949190611e9f565b61079e9190611ebe565b6001600160a01b038316600090815260a460205260409020546107c19190611ee0565b92915050565b60006001600160e01b03198216637965db0b60e01b14806107c157506301ffc9a760e01b6001600160e01b03198316146107c1565b600054610100900460ff166108175760005460ff161561081b565b303b155b6108835760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156108a5576000805461ffff19166101011790555b6108ad610ed7565b6108b5610ed7565b6108bd610ed7565b6108d560008051602061215583398151915233610f44565b6108de86610db9565b6108e785610c93565b6108f084610d73565b6108f98361092a565b61090282610e83565b61090c6064610d24565b4260a0558015610922576000805461ff00191690555b505050505050565b6000805160206121558339815191526109438133610f4e565b50609e80546001600160a01b0319166001600160a01b0392909216919091179055565b60006107c160008051602061215583398151915283610cf9565b33610989610dff565b60a1554260a0556109998161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a382528383205533825260a5905220548211156109d857600080fd5b8160a260008282546109ea9190611e88565b909155505033600090815260a5602052604081208054849290610a0e908490611e88565b9091555050609e5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190611ef8565b505050565b600082815260656020526040902060010154610aa98133610f4e565b610a888383610fb2565b6001600160a01b0381163314610b235760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161087a565b610b2d8282611038565b5050565b33610b3a610dff565b60a1554260a055610b4a8161073c565b6001600160a01b03828116600090815260a4602081815260408084209590955560a15460a3825285842055338084529190528382208054929055609d54935163a9059cbb60e01b815260048101919091526024810182905290929091169063a9059cbb906044016020604051808303816000875af1158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190611ef8565b5060408051338152602081018390527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241910160405180910390a15050565b60006107ca610c82610c46856107cd61109f565b610c7c610c77610c5987623cda2061109f565b610c6689623cda2961109f565b610c709190611ee0565b889061109f565b6110ab565b9061111b565b610c8c9190611ebe565b9392505050565b600080516020612155833981519152610cac8133610f4e565b50609880546001600160a01b039092166001600160a01b03199283168117909155609b8054909216179055565b610ce4346001611127565b50565b610cf08161172a565b610ce457600080fd5b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612155833981519152610d3d8133610f4e565b50609f55565b6000806000610d5184611829565b925092509250610d6385848484611891565b610d6c57600080fd5b5050505050565b600080516020612155833981519152610d8c8133610f4e565b50609980546001600160a01b039092166001600160a01b03199283168117909155609c8054909216179055565b600080516020612155833981519152610dd28133610f4e565b50609780546001600160a01b039092166001600160a01b03199283168117909155609a8054909216179055565b600060a254600003610e12575060a15490565b60a254609f5460a054610e259042611e88565b610e2f9190611e9f565b610e4190670de0b6b3a7640000611e9f565b610e4b9190611ebe565b60a154610e589190611ee0565b905090565b600082815260656020526040902060010154610e798133610f4e565b610a888383611038565b600080516020612155833981519152610e9c8133610f4e565b50609d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ecc346000611127565b9050610ce481611a3e565b600054610100900460ff16610f425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161087a565b565b610b2d8282610fb2565b610f588282610cf9565b610b2d57610f70816001600160a01b03166014611a47565b610f7b836020611a47565b604051602001610f8c929190611f4a565b60408051601f198184030181529082905262461bcd60e51b825261087a91600401611fbf565b610fbc8282610cf9565b610b2d5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610ff43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110428282610cf9565b15610b2d5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c8c8284611e9f565b6000600382111561110c57508060006110c5600283611ebe565b6110d0906001611ee0565b90505b81811015611106579050806002816110eb8186611ebe565b6110f59190611ee0565b6110ff9190611ebe565b90506110d3565b50919050565b8115611116575060015b919050565b6000610c8c8284611e88565b609b54609a54604080516315ab88c960e31b8152905160009384936001600160a01b039182169363e6a4390593919092169163ad5c46489160048083019260209291908290030181865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190611ff2565b60995460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112199190611ff2565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f9190612026565b50506001600160701b0316905060006112988287610c32565b905060006112a68288611e88565b609c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113189190612076565b60408051600280825260608201835292935060009290916020830190803683375050609a54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611ff2565b816000815181106113be576113be61208f565b6001600160a01b0392831660209182029290920101526099548251911690829060019081106113ef576113ef61208f565b6001600160a01b039283166020918202929092010152609a5460405163b6f9de9560e01b815291169063b6f9de95908690611435906001908690309042906004016120a5565b6000604051808303818588803b15801561144e57600080fd5b505af1158015611462573d6000803e3d6000fd5b5050609c546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190612076565b905060006114e48483611e88565b609c5460975460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af115801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190611ef8565b5060008a61156d573061156f565b335b609a5460995460405163f305d71960e01b81526001600160a01b03918216600482015260248101869052600160448201819052606482015281841660848201524260a482015292935060009283928392169063f305d719908b9060c40160606040518083038185885af11580156115ea573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061160f919061210f565b9250925092507fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b58360405161166b91906040808252600a908201526911105248185b5bdd5b9d60b21b6060820152602081019190915260800190565b60405180910390a160408051818152600a818301526911551208185b5bdd5b9d60b21b60608201526020810184905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a160408051818152600981830152686c697175696469747960b81b60608201526020810183905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a19e9d5050505050505050505050505050565b600033611735610dff565b60a1554260a0556117458161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a39091529181209190915560a28054859290611785908490611ee0565b909155505033600090815260a56020526040812080548592906117a9908490611ee0565b9091555050609e546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190611ef8565b600080600083516041146118735760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015260640161087a565b50505060208101516040820151606090920151909260009190911a90565b60003361189c610dff565b60a1554260a0556118ac8161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a39091529181209190915560a280548892906118ec908490611ee0565b909155505033600090815260a5602052604081208054889290611910908490611ee0565b9091555050609e546001600160a01b031663d505accf3330896119364262015180611ee0565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260ff8616608482015260a4810188905260c4810187905260e401600060405180830381600087803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b5050609e546040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b0390911692506323b872dd91506064016020604051808303816000875af1158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190611ef8565b9695505050505050565b610ce481611be3565b60606000611a56836002611e9f565b611a61906002611ee0565b67ffffffffffffffff811115611a7957611a79611da1565b6040519080825280601f01601f191660200182016040528015611aa3576020820181803683370190505b509050600360fc1b81600081518110611abe57611abe61208f565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611aed57611aed61208f565b60200101906001600160f81b031916908160001a9053506000611b11846002611e9f565b611b1c906001611ee0565b90505b6001811115611b94576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b5057611b5061208f565b1a60f81b828281518110611b6657611b6661208f565b60200101906001600160f81b031916908160001a90535060049490941c93611b8d8161213d565b9050611b1f565b508315610c8c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087a565b33611bec610dff565b60a1554260a055611bfc8161073c565b6001600160a01b038216600090815260a4602090815260408083209390935560a15460a39091529181209190915560a28054849290611c3c908490611ee0565b909155505033600090815260a5602052604081208054849290611c60908490611ee0565b90915550505050565b6001600160a01b0381168114610ce457600080fd5b600060208284031215611c9057600080fd5b8135610c8c81611c69565b600060208284031215611cad57600080fd5b81356001600160e01b031981168114610c8c57600080fd5b600080600080600060a08688031215611cdd57600080fd5b8535611ce881611c69565b94506020860135611cf881611c69565b93506040860135611d0881611c69565b92506060860135611d1881611c69565b91506080860135611d2881611c69565b809150509295509295909350565b600060208284031215611d4857600080fd5b5035919050565b60008060408385031215611d6257600080fd5b823591506020830135611d7481611c69565b809150509250929050565b60008060408385031215611d9257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611dca57600080fd5b82359150602083013567ffffffffffffffff80821115611de957600080fd5b818501915085601f830112611dfd57600080fd5b813581811115611e0f57611e0f611da1565b604051601f8201601f19908116603f01168101908382118183101715611e3757611e37611da1565b81604052828152886020848701011115611e5057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015611e9a57611e9a611e72565b500390565b6000816000190483118215151615611eb957611eb9611e72565b500290565b600082611edb57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611ef357611ef3611e72565b500190565b600060208284031215611f0a57600080fd5b81518015158114610c8c57600080fd5b60005b83811015611f35578181015183820152602001611f1d565b83811115611f44576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f82816017850160208801611f1a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611fb3816028840160208801611f1a565b01602801949350505050565b6020815260008251806020840152611fde816040850160208701611f1a565b601f01601f19169190910160400192915050565b60006020828403121561200457600080fd5b8151610c8c81611c69565b80516001600160701b038116811461111657600080fd5b60008060006060848603121561203b57600080fd5b6120448461200f565b92506120526020850161200f565b9150604084015163ffffffff8116811461206b57600080fd5b809150509250925092565b60006020828403121561208857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156120ef5784516001600160a01b0316835293830193918301916001016120ca565b50506001600160a01b039690961660408501525050506060015292915050565b60008060006060848603121561212457600080fd5b8351925060208401519150604084015190509250925092565b60008161214c5761214c611e72565b50600019019056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122044901c52080c4109a3b6d436636f104a489e2928c40e824f2a487106c5d1758c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmount(uint256,uint256)": {
        "details": "according to the Uniswap´s whitepaper and it´s maths, regarding to the swaps and fees the formula to calculate the swap before adding liquidity is s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f)) where s = optimal swap amount r = amount of reserve of token a a = amount of token a the user has f = swap fee percent With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the  function.",
        "params": {
          "a": "amount of token a the user has",
          "r": "amount of reserve of token a"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address,address)": {
        "details": "This address is the required by UniSwap for swaps between tokens and ETH",
        "params": {
          "_DAI": "is the address of the DAI Token",
          "_factory": "is the address of the Uniswap Factory V2",
          "_router": "is the address of the Uniswap Router V2"
        }
      },
      "isAdmin(address)": {
        "params": {
          "_address": "is the address for check"
        },
        "returns": {
          "_0": "a boolean, true if the user has the ADMIN_ROLE role or false otherwise"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "stakeLPWithPermit(uint256,bytes)": {
        "details": "This function doesn't require the user to do an Approval transaction beforeThis function require a signature by the user in the off-chain",
        "params": {
          "_amount": "is a uint which is the amount of LP Tokens to be staked"
        }
      },
      "stakeLPWithoutPermit(uint256)": {
        "details": "This function require the user to do an Approval transaction before",
        "params": {
          "_amount": "is a uint which is the amount of LP Tokens to be staked"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swapAddLiquidityAndReturnLP()": {
        "details": "only adds liquidity to the ETH / DAI pool"
      },
      "swapAddLiquidityAndStakeLP()": {
        "details": "only adds liquidity to the ETH / DAI pool"
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "is a uint with the amount of LP Tokens to be withdrawed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Log(string,uint256)": {
        "notice": "EVENTS "
      },
      "RewardClaimed(address,uint256)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "CONSTANTS"
      },
      "getAmount(uint256,uint256)": {
        "notice": "an auxiliar function to get the optimal swap amount to add liquidity"
      },
      "getReward()": {
        "notice": "Function that allows a user to withdraw his Reward tokens"
      },
      "initialize(address,address,address,address,address)": {
        "notice": "Function initializer of this upgradeable contract"
      },
      "isAdmin(address)": {
        "notice": "Function that allow to know if an address has the ADMIN_ROLE role"
      },
      "rewardPerToken()": {
        "notice": "functions to calculate rewards and earnings"
      },
      "rewardsToken()": {
        "notice": "VARIABLES"
      },
      "stakeLPWithPermit(uint256,bytes)": {
        "notice": "Function used to stake LP tokens already owned by the user"
      },
      "stakeLPWithoutPermit(uint256)": {
        "notice": "Function used to stake LP tokens already owned by the user"
      },
      "swapAddLiquidityAndReturnLP()": {
        "notice": "the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender"
      },
      "swapAddLiquidityAndStakeLP()": {
        "notice": "the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "MAPPINGS"
      },
      "withdraw(uint256)": {
        "notice": "Function that allows a user to withdraw his LP Tokens staked in the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1475,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1722,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3249,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "ROUTER",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3251,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "FACTORY",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3253,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "DAI",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 3256,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "router",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IUniswapV2Router02)2944"
      },
      {
        "astId": 3259,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "factory",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IUniswapV2Factory)2306"
      },
      {
        "astId": 3262,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "dai",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IERC20)1813"
      },
      {
        "astId": 3698,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IERC20Upgradeable)1166"
      },
      {
        "astId": 3701,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IUniswapV2ERC20)2243"
      },
      {
        "astId": 3703,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 3705,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 3707,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 3709,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "totalSupply",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 3714,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3718,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3722,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "balances",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1813": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1166": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2ERC20)2243": {
        "encoding": "inplace",
        "label": "contract IUniswapV2ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)2306": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)2944": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/LPStacking.sol:LPStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/LPStacking.sol:LPStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}