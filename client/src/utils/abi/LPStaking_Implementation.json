{
  "address": "0x8AC25089495040590573FCFE8803B2A83230d796",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ROUTER",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_FACTORY",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "stakeLPWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLPWithoutPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IUniswapV2ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddLiquidityAndReturnLP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddLiquidityAndStakeLP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd0b2b3cef9fa7edf782e8884e3833239ff0bcb5a06a3e4c7ed223cdd80807af1",
  "receipt": {
    "to": null,
    "from": "0x1fa1b17D085224d89452cdc7324c7d8930EfC83E",
    "contractAddress": "0x8AC25089495040590573FCFE8803B2A83230d796",
    "transactionIndex": 8,
    "gasUsed": "1401958",
    "logsBloom": "0x
    "blockHash": "0xb6ba7858ae467d84936d94652d17996348a1d4ca2349513f5d04c958189607a5",
    "transactionHash": "0xd0b2b3cef9fa7edf782e8884e3833239ff0bcb5a06a3e4c7ed223cdd80807af1",
    "logs": [],
    "blockNumber": 10544914,
    "cumulativeGasUsed": "3524975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c3230e4d3fe66b72ddeb534d58f56d3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FACTORY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"stakeLPWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLPWithoutPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddLiquidityAndReturnLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddLiquidityAndStakeLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmount(uint256,uint256)\":{\"details\":\"according to the Uniswap\\u00b4s whitepaper and it\\u00b4s maths, regarding to the swaps and fees the formula to calculate the swap before adding liquidity is s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f)) where s = optimal swap amount r = amount of reserve of token a a = amount of token a the user has f = swap fee percent With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the  function.\",\"params\":{\"a\":\"amount of token a the user has\",\"r\":\"amount of reserve of token a\"}},\"initialize(address,address,address,address,address)\":{\"details\":\"This address is the required by UniSwap for swaps between tokens and ETH\",\"params\":{\"_DAI\":\"is the address of the DAI Token\",\"_FACTORY\":\"is the address of the Uniswap Factory V2\",\"_ROUTER\":\"is the address of the Uniswap Router V2\"}},\"stakeLPWithPermit(uint256,bytes)\":{\"details\":\"This function doesn't require the user to do an Approval transaction beforeThis function require a signature by the user in the off-chain\",\"params\":{\"_amount\":\"is a uint which is the amount of LP Tokens to be staked\"}},\"stakeLPWithoutPermit(uint256)\":{\"details\":\"This function require the user to do an Approval transaction before\",\"params\":{\"_amount\":\"is a uint which is the amount of LP Tokens to be staked\"}},\"swapAddLiquidityAndReturnLP()\":{\"details\":\"only adds liquidity to the ETH / DAI pool\"},\"swapAddLiquidityAndStakeLP()\":{\"details\":\"only adds liquidity to the ETH / DAI pool\"},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"is a uint with the amount of LP Tokens to be withdrawed\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Log(string,uint256)\":{\"notice\":\"EVENTS \"},\"RewardClaimed(address,uint256)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"getAmount(uint256,uint256)\":{\"notice\":\"an auxiliar function to get the optimal swap amount to add liquidity\"},\"getReward()\":{\"notice\":\"Function that allows a user to withdraw his Reward tokens\"},\"initialize(address,address,address,address,address)\":{\"notice\":\"Function initializer of this upgradeable contract\"},\"rewardPerToken()\":{\"notice\":\"functions to calculate rewards and earnings\"},\"rewardsToken()\":{\"notice\":\"VARIABLES\"},\"stakeLPWithPermit(uint256,bytes)\":{\"notice\":\"Function used to stake LP tokens already owned by the user\"},\"stakeLPWithoutPermit(uint256)\":{\"notice\":\"Function used to stake LP tokens already owned by the user\"},\"swapAddLiquidityAndReturnLP()\":{\"notice\":\"the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender\"},\"swapAddLiquidityAndStakeLP()\":{\"notice\":\"the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"MAPPINGS\"},\"withdraw(uint256)\":{\"notice\":\"Function that allows a user to withdraw his LP Tokens staked in the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LPStacking.sol\":\"LPStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/LPStacking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// CONTRACTS INHERITHED\\r\\nimport \\\"./OptimalSwap.sol\\\";\\r\\nimport \\\"./StakingRewards.sol\\\";\\r\\n\\r\\ncontract LPStaking is OptimalSwap, StakingRewards  {\\r\\n    /// Functions\\r\\n    /**\\r\\n     *  @notice Function initializer of this upgradeable contract\\r\\n     *  @param _ROUTER is the address of the Uniswap Router V2\\r\\n     *  @param _FACTORY is the address of the Uniswap Factory V2\\r\\n     *  @param _DAI is the address of the DAI Token\\r\\n     *  @dev This address is the required by UniSwap for swaps between tokens and ETH\\r\\n     */\\r\\n    function initialize(\\r\\n        address _ROUTER,\\r\\n        address _FACTORY,\\r\\n        address _DAI,\\r\\n        address _stakingToken,\\r\\n        address _rewardsToken\\r\\n    ) public initializer {\\r\\n        __OptimalSwap_init(_ROUTER, _FACTORY, _DAI);\\r\\n        __Staking_init(_stakingToken, _rewardsToken);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     *  @notice Function used to stake LP tokens already owned by the user\\r\\n     *  @dev This function require the user to do an Approval transaction before\\r\\n     *  @param _amount is a uint which is the amount of LP Tokens to be staked\\r\\n     */\\r\\n    function stakeLPWithoutPermit(uint _amount) public {\\r\\n        require(stake(_amount));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     *  @notice Function used to stake LP tokens already owned by the user\\r\\n     *  @dev This function doesn't require the user to do an Approval transaction before\\r\\n     *  @dev This function require a signature by the user in the off-chain\\r\\n     *  @param _amount is a uint which is the amount of LP Tokens to be staked\\r\\n     */\\r\\n    function stakeLPWithPermit(uint _amount, bytes memory sig) public {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = _split(sig);\\r\\n\\r\\n        require(stakeWithPermit(_amount, r, s, v));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Function used to connect two contracts imported\\r\\n     *  @dev This function allows the OptimalSwap to connect with StakingRewards\\r\\n     */\\r\\n    function stakeLiquidity(uint _amount) internal override virtual{\\r\\n        stakeFromContract(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice to split the signature in the necesary parameters\\r\\n    * @dev \\\"r\\\", \\\"s\\\" and \\\"v\\\", together with the corresponding hash it recover the signer with the\\r\\n    * solidity function ecrecover, which return the address of the signer\\r\\n    * @param _sig the signature\\r\\n    * @return r cryptograph parameter used to digital signatures\\r\\n    * @return s cryptograph parameter used to digital signatures\\r\\n    * @return v required by ethereum\\r\\n    */\\r\\n    function _split(bytes memory _sig) \\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        // the length 65 corresponds to 32 bytes from \\\"r\\\" plus 32 bytes from \\\"s\\\" and 01 byte from\\r\\n        // v (uint8 equals 01 byte) \\r\\n        require(_sig.length == 65, \\\"invalid signature\\\");\\r\\n        // as dynamic data type, sig, stores it\\u00b4s length on the first 32 bytes of the data. _sig is \\r\\n        // not the actual signature, instead it is a pointer to where the signature is stored in memory\\r\\n        assembly {\\r\\n        //skip the first 32 bytes because it holds the length of the sig, and asign the next 32 to r\\r\\n            r := mload(add(_sig, 32))\\r\\n        //skip the first 64 bytes (first 32 is the length, next 32 is r) and asign the next 32 bytes to s \\r\\n            s := mload(add(_sig, 64))\\r\\n        //skip the first 96 ( first 32 is the length, next 32 is r, next 32 is s), and take the next byte\\r\\n            v := byte(0, mload(add(_sig, 96)))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x96397de9742f36e4024edfdd3594ce9b769ca911c07c6c6ab0362fbbf0ebfcc1\",\"license\":\"MIT\"},\"contracts/OptimalSwap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n/**\\r\\n* @title Swap\\r\\n* @notice a contract to calculate the optimal amount of tokens to swap, so when the user wants to add\\r\\n* liquidity, contributing with only one token, it can be swapped by the optimal amount.\\r\\n*/\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// CONTRACTS INHERITHED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n/// INTERFACES USED\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\r\\n/// LIBRARIES USED\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract OptimalSwap is Initializable {\\r\\n\\r\\n/// VARIABLES\\r\\n\\r\\n    using SafeMath for uint;\\r\\n    address public ROUTER;\\r\\n    address public FACTORY;\\r\\n    address public DAI;\\r\\n    IUniswapV2Router02 public router;\\r\\n    IUniswapV2Factory public factory;\\r\\n    IERC20 public dai;\\r\\n\\r\\n/// EVENTS \\r\\n\\r\\n    event Log(string message, uint value);\\r\\n\\r\\n/// FUNCTIONS\\r\\n    function __OptimalSwap_init(\\r\\n        address _ROUTER,\\r\\n        address _FACTORY,\\r\\n        address _DAI\\r\\n    ) \\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        ROUTER = _ROUTER;\\r\\n        router = IUniswapV2Router02(ROUTER);\\r\\n        FACTORY = _FACTORY;\\r\\n        factory = IUniswapV2Factory(FACTORY);\\r\\n        DAI = _DAI;\\r\\n        dai = IERC20(DAI); \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @notice an auxiliar function to get the square root\\r\\n    * @dev taked from Uniswap\\r\\n    */\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n        // else z = 0\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice an auxiliar function to get the optimal swap amount to add liquidity\\r\\n    * @dev according to the Uniswap\\u00b4s whitepaper and it\\u00b4s maths, regarding to the swaps and fees\\r\\n    * the formula to calculate the swap before adding liquidity is\\r\\n    * s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f))\\r\\n    * where\\r\\n    * s = optimal swap amount\\r\\n    * r = amount of reserve of token a\\r\\n    * a = amount of token a the user has\\r\\n    * f = swap fee percent\\r\\n    * With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the \\r\\n    * function.\\r\\n    * @param r amount of reserve of token a\\r\\n    * @param a amount of token a the user has\\r\\n    */\\r\\n    function getAmount(uint r, uint a) public pure returns (uint) {\\r\\n        return (sqrt(r.mul(r.mul(3988009)+a.mul(3988000))).sub(r.mul(1997)))/1994;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice the main function to swap and add liquidity\\r\\n    * @notice this function returns the LP Tokens to the msg sender\\r\\n    * @dev only adds liquidity to the ETH / DAI pool\\r\\n    */\\r\\n    function swapAddLiquidityAndReturnLP() external payable {\\r\\n        swapAndAddLiquidity(msg.value, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice the main function to swap and add liquidity\\r\\n    * @notice this function returns the LP Tokens to the msg sender\\r\\n    * @dev only adds liquidity to the ETH / DAI pool\\r\\n    */\\r\\n    function swapAddLiquidityAndStakeLP() external payable {\\r\\n        uint liquidity = swapAndAddLiquidity(msg.value, false);\\r\\n\\r\\n        stakeLiquidity(liquidity);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     *  @notice Function used to make the Swap and add the liquidity\\r\\n     *  @param _amountETH is a uint with the amount of ETH sended to the main functions\\r\\n     *  @param returnLP is a boolean used to know if the LP goes to the user or stake in the contract\\r\\n     */\\r\\n    function swapAndAddLiquidity(uint _amountETH, bool returnLP) internal returns (uint) {\\r\\n        // Get the ETH / DAI pair price\\r\\n        address pair = factory.getPair(router.WETH(), DAI);\\r\\n\\r\\n        // Get the reserves of ETH\\r\\n        (uint reserve0, , ) = IUniswapV2Pair(pair).getReserves();\\r\\n\\r\\n        // Calculate the optimal amount to swap and the amount left.\\r\\n        uint ethToSwap = getAmount(reserve0, _amountETH);\\r\\n        uint ethLeft = _amountETH - ethToSwap;\\r\\n\\r\\n        // Get the actual contract\\u00b4s DAI\\u00b4s balance\\r\\n        uint afterDAIbalance = dai.balanceOf(address(this));\\r\\n\\r\\n        // Perform the swap\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = DAI;\\r\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:ethToSwap}\\r\\n        (\\r\\n            1,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // Get the new contract\\u00b4s DAI\\u00b4s balance and calculate the DAIs get from the swap\\r\\n        uint beforeDAIbalance = dai.balanceOf(address(this));\\r\\n        uint actualDAI = beforeDAIbalance - afterDAIbalance;\\r\\n\\r\\n        // Approve the Uniswap Router to spend the corresponding balance\\r\\n        dai.approve(ROUTER, actualDAI);\\r\\n\\r\\n        address receiver = (returnLP) ? msg.sender : address(this);\\r\\n\\r\\n        // Add the liquidity with the ETH left and the corresponding DAI\\r\\n        (\\r\\n            uint amountDAI,\\r\\n            uint amountETH,\\r\\n            uint liquidity\\r\\n        ) = router.addLiquidityETH{value:ethLeft}(\\r\\n            DAI,\\r\\n            actualDAI,\\r\\n            1,\\r\\n            1,\\r\\n            receiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // Emit the corresponding events\\r\\n        emit Log(\\\"DAI amount\\\", amountDAI);\\r\\n        emit Log(\\\"ETH amount\\\", amountETH);\\r\\n        emit Log(\\\"liquidity\\\", liquidity);\\r\\n\\r\\n        return (liquidity);\\r\\n    }\\r\\n\\r\\n    function stakeLiquidity(uint _amount) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x97a086ff31d7027717f3b9cbbdf7569106e0ae1c1e8c351f61aadf226b5312ca\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n/**\\r\\n* @title Staking\\r\\n* @notice a contract to stake and calculate the staking rewards.\\r\\n*/\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// INTERFACES USED\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\\\";\\r\\n\\r\\ncontract StakingRewards is Initializable {\\r\\n\\r\\n/// VARIABLES\\r\\n\\r\\n    IERC20Upgradeable public rewardsToken; //reward given to the user\\r\\n    IUniswapV2ERC20 public stakingToken; //token that the user stakes, both ERC20\\r\\n    uint public rewardRate; // tokens minted per second\\r\\n    uint public lastUpdateTime; // last time this contract was called\\r\\n    uint public rewardPerTokenStored; // rewardRate / _totalSupply\\r\\n    uint public totalSupply; // Asociated to the _balances mapping\\r\\n\\r\\n/// MAPPINGS\\r\\n\\r\\n    mapping(address => uint) public userRewardPerTokenPaid;\\r\\n    mapping(address => uint) public rewards;\\r\\n    mapping(address => uint) public balances; //tokens staked per user\\r\\n\\r\\n/// EVENTS\\r\\n\\r\\n    event RewardClaimed(address account, uint amount);\\r\\n\\r\\n/// MODIFIERS\\r\\n    /**\\r\\n    * @notice we update the reward every time the user interact with the contract\\r\\n    */\\r\\n    modifier updateReward(address account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        lastUpdateTime = block.timestamp;\\r\\n        rewards[account] = earned(account);\\r\\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n/// FUNCTIONS\\r\\n\\r\\n    /**\\r\\n    * @notice the next to functions are inmutables, and they can only be called by a function\\r\\n    * with the {Initializer} modifier\\r\\n    * @dev to initialize this contract call the __Staking_init on yor initialize function from\\r\\n    * your upgradeable contract\\r\\n    */\\r\\n    function __Staking_init(address _stakingToken, address _rewardsToken)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        stakingToken = IUniswapV2ERC20(_stakingToken);\\r\\n        rewardsToken = IERC20Upgradeable(_rewardsToken);\\r\\n        rewardRate = 100;\\r\\n        lastUpdateTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice functions to calculate rewards and earnings\\r\\n    */\\r\\n    function rewardPerToken() public view returns (uint) {\\r\\n        if (totalSupply == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            rewardPerTokenStored +\\r\\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / totalSupply);\\r\\n    }\\r\\n\\r\\n    function earned(address account) public view returns (uint) {\\r\\n        return \\r\\n            rewards[account] +\\r\\n            ((balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to stake his LP tokens obtained outside the contract\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be staked\\r\\n    */\\r\\n    function stake(uint _amount) internal updateReward(msg.sender) returns (bool) {\\r\\n        totalSupply += _amount;\\r\\n        balances[msg.sender] += _amount;\\r\\n        return stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to stake his LP tokens obtained inside the contract\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be staked\\r\\n    */\\r\\n    function stakeFromContract(uint _amount) internal updateReward(msg.sender) {\\r\\n        totalSupply += _amount;\\r\\n        balances[msg.sender] += _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to stake his LP tokens obtained outside the contract\\r\\n    *   @notice this function uses a signature in the Uniswap's permit function\\r\\n    *   @dev This use of the signature allows the user transfer without approve before\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be staked\\r\\n    *   @param r is a bytes32 part of the signature required by the permit function\\r\\n    *   @param s is a bytes32 part of the signature required by the permit function\\r\\n    *   @param v is a uint8 part of the signature required by the permit function\\r\\n    */\\r\\n    function stakeWithPermit(\\r\\n        uint _amount,\\r\\n        bytes32 r,\\r\\n        bytes32 s,\\r\\n        uint8 v\\r\\n    ) \\r\\n        internal\\r\\n        updateReward(msg.sender)\\r\\n        returns (bool)\\r\\n    {\\r\\n        totalSupply += _amount;\\r\\n        balances[msg.sender] += _amount;\\r\\n        stakingToken.permit(msg.sender, address(this), _amount, block.timestamp + 1 days, v, r, s);\\r\\n        return stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to withdraw his LP Tokens staked in the contract\\r\\n    *   @param _amount is a uint with the amount of LP Tokens to be withdrawed\\r\\n    */\\r\\n    function withdraw(uint _amount) external updateReward(msg.sender) {\\r\\n        require(balances[msg.sender] >= _amount);\\r\\n\\r\\n        totalSupply -= _amount;\\r\\n        balances[msg.sender] -= _amount;\\r\\n        stakingToken.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *   @notice Function that allows a user to withdraw his Reward tokens\\r\\n    */\\r\\n    function getReward() external updateReward(msg.sender) {\\r\\n        uint reward = rewards[msg.sender];\\r\\n        rewards[msg.sender] = 0;\\r\\n        rewardsToken.transfer(msg.sender, reward);\\r\\n\\r\\n        emit RewardClaimed(msg.sender, reward);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32b25b580b69719aa17d594deb19c26144e41be018356dbf52e1c4578ebd5062\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611868806100206000396000f3fe6080604052600436106101695760003560e01c8063809b0c2d116100d1578063cd3daf9d1161008a578063e0bab4c411610064578063e0bab4c414610419578063ea24682714610439578063f4b9fa7514610441578063f887ea401461046157600080fd5b8063cd3daf9d146103ce578063d1af0c7d146103e3578063df136d651461040357600080fd5b8063809b0c2d146103235780638408b5ac1461032b5780638b8763471461034b578063aae693e014610378578063c45a015514610398578063c8f33c91146103b857600080fd5b80632e1a7d4d116101235780632e1a7d4d1461027257806332fe7b26146102925780633d18b912146102b85780634ca98997146102cd57806372f702f3146102ed5780637b0a47ee1461030d57600080fd5b80628cc262146101755780630700037d146101a85780631459457a146101d557806318160ddd146101f757806327e235e31461020d5780632dd310001461023a57600080fd5b3661017057005b600080fd5b34801561018157600080fd5b5061019561019036600461145a565b610481565b6040519081526020015b60405180910390f35b3480156101b457600080fd5b506101956101c336600461145a565b600d6020526000908152604090205481565b3480156101e157600080fd5b506101f56101f0366004611477565b61050c565b005b34801561020357600080fd5b50610195600b5481565b34801561021957600080fd5b5061019561022836600461145a565b600e6020526000908152604090205481565b34801561024657600080fd5b5060015461025a906001600160a01b031681565b6040516001600160a01b03909116815260200161019f565b34801561027e57600080fd5b506101f561028d3660046114e8565b6105e4565b34801561029e57600080fd5b5060005461025a906201000090046001600160a01b031681565b3480156102c457600080fd5b506101f56106f1565b3480156102d957600080fd5b506101956102e8366004611501565b6107f2565b3480156102f957600080fd5b5060075461025a906001600160a01b031681565b34801561031957600080fd5b5061019560085481565b6101f5610853565b34801561033757600080fd5b506101f56103463660046114e8565b610861565b34801561035757600080fd5b5061019561036636600461145a565b600c6020526000908152604090205481565b34801561038457600080fd5b506101f5610393366004611539565b610873565b3480156103a457600080fd5b5060045461025a906001600160a01b031681565b3480156103c457600080fd5b5061019560095481565b3480156103da57600080fd5b506101956108a3565b3480156103ef57600080fd5b5060065461025a906001600160a01b031681565b34801561040f57600080fd5b50610195600a5481565b34801561042557600080fd5b5060025461025a906001600160a01b031681565b6101f5610901565b34801561044d57600080fd5b5060055461025a906001600160a01b031681565b34801561046d57600080fd5b5060035461025a906001600160a01b031681565b6001600160a01b0381166000908152600c6020526040812054670de0b6b3a7640000906104ac6108a3565b6104b6919061160a565b6001600160a01b0384166000908152600e60205260409020546104d99190611621565b6104e39190611640565b6001600160a01b0383166000908152600d60205260409020546105069190611662565b92915050565b600054610100900460ff166105275760005460ff161561052b565b303b155b6105935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156105b5576000805461ffff19166101011790555b6105c0868686610919565b6105ca83836109bb565b80156105dc576000805461ff00191690555b505050505050565b336105ed6108a3565b600a55426009556105fd81610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c825283832055338252600e9052205482111561063c57600080fd5b81600b600082825461064e919061160a565b9091555050336000908152600e60205260408120805484929061067290849061160a565b909155505060075460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061167a565b505050565b336106fa6108a3565b600a554260095561070a81610481565b6001600160a01b038281166000908152600d6020818152604080842095909555600a54600c825285842055338084529190528382208054929055600654935163a9059cbb60e01b815260048101919091526024810182905290929091169063a9059cbb906044016020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061167a565b5060408051338152602081018390527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241910160405180910390a15050565b60006107ca610842610806856107cd610a19565b61083c61083761081987623cda20610a19565b61082689623cda29610a19565b6108309190611662565b8890610a19565b610a25565b90610a95565b61084c9190611640565b9392505050565b61085e346001610aa1565b50565b61086a816110a7565b61085e57600080fd5b6000806000610881846111a6565b9250925092506108938584848461120e565b61089c57600080fd5b5050505050565b6000600b546000036108b65750600a5490565b600b546008546009546108c9904261160a565b6108d39190611621565b6108e590670de0b6b3a7640000611621565b6108ef9190611640565b600a546108fc9190611662565b905090565b600061090e346000610aa1565b905061085e816113bb565b600054610100900460ff166109405760405162461bcd60e51b815260040161058a9061169c565b6000805462010000600160b01b031916620100006001600160a01b0395861681029190911791829055600380549190920485166001600160a01b031991821617909155600180548216938516938417905560048054821690931790925560028054831691909316908117909255600580549091169091179055565b600054610100900460ff166109e25760405162461bcd60e51b815260040161058a9061169c565b600780546001600160a01b039384166001600160a01b03199182161790915560068054929093169116179055606460085542600955565b600061084c8284611621565b60006003821115610a865750806000610a3f600283611640565b610a4a906001611662565b90505b81811015610a8057905080600281610a658186611640565b610a6f9190611662565b610a799190611640565b9050610a4d565b50919050565b8115610a90575060015b919050565b600061084c828461160a565b60048054600354604080516315ab88c960e31b8152905160009485946001600160a01b039081169463e6a439059491169263ad5c4648928281019260209291908290030181865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e91906116e7565b60025460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9091906116e7565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf6919061171b565b50506001600160701b031690506000610c0f82876107f2565b90506000610c1d828861160a565b6005546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f919061176b565b60408051600280825260608201835292935060009290916020830190803683375050600354604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906116e7565b81600081518110610d3557610d35611784565b6001600160a01b039283166020918202929092010152600254825191169082906001908110610d6657610d66611784565b6001600160a01b03928316602091820292909201015260035460405163b6f9de9560e01b815291169063b6f9de95908690610dac9060019086903090429060040161179a565b6000604051808303818588803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b50506005546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d919061176b565b90506000610e5b848361160a565b60055460005460405163095ea7b360e01b81526001600160a01b03620100009092048216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af1158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc919061167a565b5060008a610eea5730610eec565b335b60035460025460405163f305d71960e01b81526001600160a01b03918216600482015260248101869052600160448201819052606482015281841660848201524260a482015292935060009283928392169063f305d719908b9060c40160606040518083038185885af1158015610f67573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f8c9190611804565b9250925092507fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b583604051610fe891906040808252600a908201526911105248185b5bdd5b9d60b21b6060820152602081019190915260800190565b60405180910390a160408051818152600a818301526911551208185b5bdd5b9d60b21b60608201526020810184905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a160408051818152600981830152686c697175696469747960b81b60608201526020810183905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a19e9d5050505050505050505050505050565b6000336110b26108a3565b600a55426009556110c281610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c90915291812091909155600b8054859290611102908490611662565b9091555050336000908152600e602052604081208054859290611126908490611662565b90915550506007546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611182573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061167a565b600080600083516041146111f05760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015260640161058a565b50505060208101516040820151606090920151909260009190911a90565b6000336112196108a3565b600a554260095561122981610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c90915291812091909155600b8054889290611269908490611662565b9091555050336000908152600e60205260408120805488929061128d908490611662565b90915550506007546001600160a01b031663d505accf3330896112b34262015180611662565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260ff8616608482015260a4810188905260c4810187905260e401600060405180830381600087803b15801561131e57600080fd5b505af1158015611332573d6000803e3d6000fd5b50506007546040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b0390911692506323b872dd91506064016020604051808303816000875af115801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b1919061167a565b9695505050505050565b61085e81336113c86108a3565b600a55426009556113d881610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c90915291812091909155600b8054849290611418908490611662565b9091555050336000908152600e60205260408120805484929061143c908490611662565b90915550505050565b6001600160a01b038116811461085e57600080fd5b60006020828403121561146c57600080fd5b813561084c81611445565b600080600080600060a0868803121561148f57600080fd5b853561149a81611445565b945060208601356114aa81611445565b935060408601356114ba81611445565b925060608601356114ca81611445565b915060808601356114da81611445565b809150509295509295909350565b6000602082840312156114fa57600080fd5b5035919050565b6000806040838503121561151457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561154c57600080fd5b82359150602083013567ffffffffffffffff8082111561156b57600080fd5b818501915085601f83011261157f57600080fd5b81358181111561159157611591611523565b604051601f8201601f19908116603f011681019083821181831017156115b9576115b9611523565b816040528281528860208487010111156115d257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b60008282101561161c5761161c6115f4565b500390565b600081600019048311821515161561163b5761163b6115f4565b500290565b60008261165d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611675576116756115f4565b500190565b60006020828403121561168c57600080fd5b8151801515811461084c57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156116f957600080fd5b815161084c81611445565b80516001600160701b0381168114610a9057600080fd5b60008060006060848603121561173057600080fd5b61173984611704565b925061174760208501611704565b9150604084015163ffffffff8116811461176057600080fd5b809150509250925092565b60006020828403121561177d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156117e45784516001600160a01b0316835293830193918301916001016117bf565b50506001600160a01b039690961660408501525050506060015292915050565b60008060006060848603121561181957600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212208c5a2fcb38bdd59e5c0b7b8a0243cb1d82a65509de62afd1445ca471ed60e34564736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101695760003560e01c8063809b0c2d116100d1578063cd3daf9d1161008a578063e0bab4c411610064578063e0bab4c414610419578063ea24682714610439578063f4b9fa7514610441578063f887ea401461046157600080fd5b8063cd3daf9d146103ce578063d1af0c7d146103e3578063df136d651461040357600080fd5b8063809b0c2d146103235780638408b5ac1461032b5780638b8763471461034b578063aae693e014610378578063c45a015514610398578063c8f33c91146103b857600080fd5b80632e1a7d4d116101235780632e1a7d4d1461027257806332fe7b26146102925780633d18b912146102b85780634ca98997146102cd57806372f702f3146102ed5780637b0a47ee1461030d57600080fd5b80628cc262146101755780630700037d146101a85780631459457a146101d557806318160ddd146101f757806327e235e31461020d5780632dd310001461023a57600080fd5b3661017057005b600080fd5b34801561018157600080fd5b5061019561019036600461145a565b610481565b6040519081526020015b60405180910390f35b3480156101b457600080fd5b506101956101c336600461145a565b600d6020526000908152604090205481565b3480156101e157600080fd5b506101f56101f0366004611477565b61050c565b005b34801561020357600080fd5b50610195600b5481565b34801561021957600080fd5b5061019561022836600461145a565b600e6020526000908152604090205481565b34801561024657600080fd5b5060015461025a906001600160a01b031681565b6040516001600160a01b03909116815260200161019f565b34801561027e57600080fd5b506101f561028d3660046114e8565b6105e4565b34801561029e57600080fd5b5060005461025a906201000090046001600160a01b031681565b3480156102c457600080fd5b506101f56106f1565b3480156102d957600080fd5b506101956102e8366004611501565b6107f2565b3480156102f957600080fd5b5060075461025a906001600160a01b031681565b34801561031957600080fd5b5061019560085481565b6101f5610853565b34801561033757600080fd5b506101f56103463660046114e8565b610861565b34801561035757600080fd5b5061019561036636600461145a565b600c6020526000908152604090205481565b34801561038457600080fd5b506101f5610393366004611539565b610873565b3480156103a457600080fd5b5060045461025a906001600160a01b031681565b3480156103c457600080fd5b5061019560095481565b3480156103da57600080fd5b506101956108a3565b3480156103ef57600080fd5b5060065461025a906001600160a01b031681565b34801561040f57600080fd5b50610195600a5481565b34801561042557600080fd5b5060025461025a906001600160a01b031681565b6101f5610901565b34801561044d57600080fd5b5060055461025a906001600160a01b031681565b34801561046d57600080fd5b5060035461025a906001600160a01b031681565b6001600160a01b0381166000908152600c6020526040812054670de0b6b3a7640000906104ac6108a3565b6104b6919061160a565b6001600160a01b0384166000908152600e60205260409020546104d99190611621565b6104e39190611640565b6001600160a01b0383166000908152600d60205260409020546105069190611662565b92915050565b600054610100900460ff166105275760005460ff161561052b565b303b155b6105935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156105b5576000805461ffff19166101011790555b6105c0868686610919565b6105ca83836109bb565b80156105dc576000805461ff00191690555b505050505050565b336105ed6108a3565b600a55426009556105fd81610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c825283832055338252600e9052205482111561063c57600080fd5b81600b600082825461064e919061160a565b9091555050336000908152600e60205260408120805484929061067290849061160a565b909155505060075460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061167a565b505050565b336106fa6108a3565b600a554260095561070a81610481565b6001600160a01b038281166000908152600d6020818152604080842095909555600a54600c825285842055338084529190528382208054929055600654935163a9059cbb60e01b815260048101919091526024810182905290929091169063a9059cbb906044016020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061167a565b5060408051338152602081018390527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241910160405180910390a15050565b60006107ca610842610806856107cd610a19565b61083c61083761081987623cda20610a19565b61082689623cda29610a19565b6108309190611662565b8890610a19565b610a25565b90610a95565b61084c9190611640565b9392505050565b61085e346001610aa1565b50565b61086a816110a7565b61085e57600080fd5b6000806000610881846111a6565b9250925092506108938584848461120e565b61089c57600080fd5b5050505050565b6000600b546000036108b65750600a5490565b600b546008546009546108c9904261160a565b6108d39190611621565b6108e590670de0b6b3a7640000611621565b6108ef9190611640565b600a546108fc9190611662565b905090565b600061090e346000610aa1565b905061085e816113bb565b600054610100900460ff166109405760405162461bcd60e51b815260040161058a9061169c565b6000805462010000600160b01b031916620100006001600160a01b0395861681029190911791829055600380549190920485166001600160a01b031991821617909155600180548216938516938417905560048054821690931790925560028054831691909316908117909255600580549091169091179055565b600054610100900460ff166109e25760405162461bcd60e51b815260040161058a9061169c565b600780546001600160a01b039384166001600160a01b03199182161790915560068054929093169116179055606460085542600955565b600061084c8284611621565b60006003821115610a865750806000610a3f600283611640565b610a4a906001611662565b90505b81811015610a8057905080600281610a658186611640565b610a6f9190611662565b610a799190611640565b9050610a4d565b50919050565b8115610a90575060015b919050565b600061084c828461160a565b60048054600354604080516315ab88c960e31b8152905160009485946001600160a01b039081169463e6a439059491169263ad5c4648928281019260209291908290030181865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e91906116e7565b60025460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9091906116e7565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf6919061171b565b50506001600160701b031690506000610c0f82876107f2565b90506000610c1d828861160a565b6005546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f919061176b565b60408051600280825260608201835292935060009290916020830190803683375050600354604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906116e7565b81600081518110610d3557610d35611784565b6001600160a01b039283166020918202929092010152600254825191169082906001908110610d6657610d66611784565b6001600160a01b03928316602091820292909201015260035460405163b6f9de9560e01b815291169063b6f9de95908690610dac9060019086903090429060040161179a565b6000604051808303818588803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b50506005546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d919061176b565b90506000610e5b848361160a565b60055460005460405163095ea7b360e01b81526001600160a01b03620100009092048216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af1158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc919061167a565b5060008a610eea5730610eec565b335b60035460025460405163f305d71960e01b81526001600160a01b03918216600482015260248101869052600160448201819052606482015281841660848201524260a482015292935060009283928392169063f305d719908b9060c40160606040518083038185885af1158015610f67573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f8c9190611804565b9250925092507fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b583604051610fe891906040808252600a908201526911105248185b5bdd5b9d60b21b6060820152602081019190915260800190565b60405180910390a160408051818152600a818301526911551208185b5bdd5b9d60b21b60608201526020810184905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a160408051818152600981830152686c697175696469747960b81b60608201526020810183905290517fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b59181900360800190a19e9d5050505050505050505050505050565b6000336110b26108a3565b600a55426009556110c281610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c90915291812091909155600b8054859290611102908490611662565b9091555050336000908152600e602052604081208054859290611126908490611662565b90915550506007546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611182573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061167a565b600080600083516041146111f05760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015260640161058a565b50505060208101516040820151606090920151909260009190911a90565b6000336112196108a3565b600a554260095561122981610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c90915291812091909155600b8054889290611269908490611662565b9091555050336000908152600e60205260408120805488929061128d908490611662565b90915550506007546001600160a01b031663d505accf3330896112b34262015180611662565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260ff8616608482015260a4810188905260c4810187905260e401600060405180830381600087803b15801561131e57600080fd5b505af1158015611332573d6000803e3d6000fd5b50506007546040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b0390911692506323b872dd91506064016020604051808303816000875af115801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b1919061167a565b9695505050505050565b61085e81336113c86108a3565b600a55426009556113d881610481565b6001600160a01b0382166000908152600d6020908152604080832093909355600a54600c90915291812091909155600b8054849290611418908490611662565b9091555050336000908152600e60205260408120805484929061143c908490611662565b90915550505050565b6001600160a01b038116811461085e57600080fd5b60006020828403121561146c57600080fd5b813561084c81611445565b600080600080600060a0868803121561148f57600080fd5b853561149a81611445565b945060208601356114aa81611445565b935060408601356114ba81611445565b925060608601356114ca81611445565b915060808601356114da81611445565b809150509295509295909350565b6000602082840312156114fa57600080fd5b5035919050565b6000806040838503121561151457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561154c57600080fd5b82359150602083013567ffffffffffffffff8082111561156b57600080fd5b818501915085601f83011261157f57600080fd5b81358181111561159157611591611523565b604051601f8201601f19908116603f011681019083821181831017156115b9576115b9611523565b816040528281528860208487010111156115d257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b60008282101561161c5761161c6115f4565b500390565b600081600019048311821515161561163b5761163b6115f4565b500290565b60008261165d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611675576116756115f4565b500190565b60006020828403121561168c57600080fd5b8151801515811461084c57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156116f957600080fd5b815161084c81611445565b80516001600160701b0381168114610a9057600080fd5b60008060006060848603121561173057600080fd5b61173984611704565b925061174760208501611704565b9150604084015163ffffffff8116811461176057600080fd5b809150509250925092565b60006020828403121561177d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156117e45784516001600160a01b0316835293830193918301916001016117bf565b50506001600160a01b039690961660408501525050506060015292915050565b60008060006060848603121561181957600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212208c5a2fcb38bdd59e5c0b7b8a0243cb1d82a65509de62afd1445ca471ed60e34564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmount(uint256,uint256)": {
        "details": "according to the Uniswap´s whitepaper and it´s maths, regarding to the swaps and fees the formula to calculate the swap before adding liquidity is s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f)) where s = optimal swap amount r = amount of reserve of token a a = amount of token a the user has f = swap fee percent With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the  function.",
        "params": {
          "a": "amount of token a the user has",
          "r": "amount of reserve of token a"
        }
      },
      "initialize(address,address,address,address,address)": {
        "details": "This address is the required by UniSwap for swaps between tokens and ETH",
        "params": {
          "_DAI": "is the address of the DAI Token",
          "_FACTORY": "is the address of the Uniswap Factory V2",
          "_ROUTER": "is the address of the Uniswap Router V2"
        }
      },
      "stakeLPWithPermit(uint256,bytes)": {
        "details": "This function doesn't require the user to do an Approval transaction beforeThis function require a signature by the user in the off-chain",
        "params": {
          "_amount": "is a uint which is the amount of LP Tokens to be staked"
        }
      },
      "stakeLPWithoutPermit(uint256)": {
        "details": "This function require the user to do an Approval transaction before",
        "params": {
          "_amount": "is a uint which is the amount of LP Tokens to be staked"
        }
      },
      "swapAddLiquidityAndReturnLP()": {
        "details": "only adds liquidity to the ETH / DAI pool"
      },
      "swapAddLiquidityAndStakeLP()": {
        "details": "only adds liquidity to the ETH / DAI pool"
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "is a uint with the amount of LP Tokens to be withdrawed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Log(string,uint256)": {
        "notice": "EVENTS "
      },
      "RewardClaimed(address,uint256)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "getAmount(uint256,uint256)": {
        "notice": "an auxiliar function to get the optimal swap amount to add liquidity"
      },
      "getReward()": {
        "notice": "Function that allows a user to withdraw his Reward tokens"
      },
      "initialize(address,address,address,address,address)": {
        "notice": "Function initializer of this upgradeable contract"
      },
      "rewardPerToken()": {
        "notice": "functions to calculate rewards and earnings"
      },
      "rewardsToken()": {
        "notice": "VARIABLES"
      },
      "stakeLPWithPermit(uint256,bytes)": {
        "notice": "Function used to stake LP tokens already owned by the user"
      },
      "stakeLPWithoutPermit(uint256)": {
        "notice": "Function used to stake LP tokens already owned by the user"
      },
      "swapAddLiquidityAndReturnLP()": {
        "notice": "the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender"
      },
      "swapAddLiquidityAndStakeLP()": {
        "notice": "the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "MAPPINGS"
      },
      "withdraw(uint256)": {
        "notice": "Function that allows a user to withdraw his LP Tokens staked in the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3096,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "ROUTER",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3098,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "FACTORY",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3100,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "DAI",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3103,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router02)2944"
      },
      {
        "astId": 3106,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "factory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Factory)2306"
      },
      {
        "astId": 3109,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "dai",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1813"
      },
      {
        "astId": 3581,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20Upgradeable)1166"
      },
      {
        "astId": 3584,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2ERC20)2243"
      },
      {
        "astId": 3586,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3588,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3590,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3592,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3597,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3601,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3605,
        "contract": "contracts/LPStacking.sol:LPStaking",
        "label": "balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1813": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1166": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2ERC20)2243": {
        "encoding": "inplace",
        "label": "contract IUniswapV2ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)2306": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)2944": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}